import { DomUtils } from '../../core/utils';
import { ToolbarItemBase, IToolbarItemOptions } from './toolbar-item-base';

/**
 * DÄ±ÅŸa Aktarma TÃ¼rleri
 */
export enum ExportType {
  CSV = 'csv',
  PDF = 'pdf',
  EXCEL = 'excel',
  JSON = 'json'
}

/**
 * DÄ±ÅŸa Aktarma Butonu SeÃ§enekleri
 */
export interface IExportButtonOptions extends IToolbarItemOptions {
  exportType: ExportType;
  label?: string;
  icon?: string;
  fileName?: string;
  onExport?: (type: ExportType, data: any) => void;
}

/**
 * DÄ±ÅŸa Aktarma Butonu Ã–ÄŸesi
 * 
 * Tablo verilerini farklÄ± formatlarda dÄ±ÅŸa aktarmak iÃ§in buton saÄŸlar.
 */
export class ExportButtonItem extends ToolbarItemBase {
  private exportType: ExportType;
  private fileName: string;
  private onExportCallback?: (type: ExportType, data: any) => void;
  
  /**
   * YapÄ±cÄ± metod
   */
  constructor(options: IExportButtonOptions) {
    super(options);
    
    this.exportType = options.exportType;
    this.fileName = options.fileName || `zen-grid-export-${Date.now()}`;
    this.onExportCallback = options.onExport;
    
    // TÄ±klama olayÄ±nÄ± ekle
    this.element.addEventListener('click', () => this.handleExport());
  }
  
  /**
   * Buton elementini oluÅŸturur
   */
  protected createElement(): HTMLElement {
    let icon = '';
    let label = '';
    
    // TÃ¼r bazlÄ± varsayÄ±lan deÄŸerler
    switch (this.exportType) {
      case ExportType.CSV:
        icon = 'ğŸ“„';
        label = 'CSV';
        break;
      case ExportType.PDF:
        icon = 'ğŸ“‘';
        label = 'PDF';
        break;
      case ExportType.EXCEL:
        icon = 'ğŸ“Š';
        label = 'Excel';
        break;
      case ExportType.JSON:
        icon = '{}';
        label = 'JSON';
        break;
    }
    
    const button = DomUtils.createElement('button', {
      class: `zen-grid-toolbar-button zen-grid-export-${this.exportType}`,
      title: `${label} Olarak DÄ±ÅŸa Aktar`
    }, [`${icon} ${label}`]);
    
    return button;
  }
  
  /**
   * DÄ±ÅŸa aktarma iÅŸlemi gerÃ§ekleÅŸtiÄŸinde tetiklenir
   */
  private handleExport(): void {
    if (this.disabled) return;
    
    // Grid verilerini al
    const data = this.getGridData();
    
    // Callback tanÄ±mlanmÄ±ÅŸsa onu Ã§aÄŸÄ±r
    if (this.onExportCallback) {
      this.onExportCallback(this.exportType, data);
      return;
    }
    
    // Aksi halde varsayÄ±lan dÄ±ÅŸa aktarma iÅŸlevini kullan
    this.performExport(data);
  }
  
  /**
   * Grid verilerini alÄ±r
   */
  private getGridData(): any {
    if (!this.grid) return null;
    
    // Grid Ã¼zerinden veri ve sÃ¼tunlarÄ± al
    try {
      // @ts-ignore: grid Ã¼zerindeki data ve columns Ã¶zelliÄŸi
      const gridInstance = this.grid as any;
      
      return {
        data: gridInstance.data || [],
        columns: gridInstance.columns || []
      };
    } catch (error) {
      console.error('Grid verisi alÄ±nÄ±rken hata oluÅŸtu:', error);
      return null;
    }
  }
  
  /**
   * DÄ±ÅŸa aktarma iÅŸlemini gerÃ§ekleÅŸtirir
   */
  private performExport(gridData: any): void {
    if (!gridData || !gridData.data || !gridData.columns) {
      console.error('DÄ±ÅŸa aktarÄ±lacak veri bulunamadÄ±.');
      return;
    }
    
    switch (this.exportType) {
      case ExportType.CSV:
        this.exportAsCSV(gridData);
        break;
      case ExportType.PDF:
        this.exportAsPDF(gridData);
        break;
      case ExportType.EXCEL:
        this.exportAsExcel(gridData);
        break;
      case ExportType.JSON:
        this.exportAsJSON(gridData);
        break;
    }
  }
  
  /**
   * CSV olarak dÄ±ÅŸa aktar
   */
  private exportAsCSV(gridData: any): void {
    const { data, columns } = gridData;
    
    // CSV baÅŸlÄ±k satÄ±rÄ±
    let csvContent = "";
    const headers = columns.map((col: any) => col.header || col.field);
    csvContent += headers.join(',') + '\n';
    
    // Veri satÄ±rlarÄ±
    data.forEach((row: any) => {
      const rowContent = columns.map((col: any) => {
        const value = row[col.field];
        // CSV'de virgÃ¼l ve Ã§ift tÄ±rnaklarÄ± kaÃ§Ä±ÅŸ karakteri ile iÅŸle
        return `"${String(value).replace(/"/g, '""')}"`;
      });
      csvContent += rowContent.join(',') + '\n';
    });
    
    // CSV dosyasÄ±nÄ± indir
    this.downloadFile(csvContent, 'text/csv;charset=utf-8;', `${this.fileName}.csv`);
  }
  
  /**
   * PDF olarak dÄ±ÅŸa aktar
   */
  private exportAsPDF(gridData: any): void {
    alert('PDF dÄ±ÅŸa aktarma Ã¶zelliÄŸi yakÄ±nda eklenecek!');
    // Not: PDF Ã§Ä±ktÄ±sÄ± iÃ§in genellikle jsPDF gibi ilave kÃ¼tÃ¼phaneler gereklidir
  }
  
  /**
   * Excel olarak dÄ±ÅŸa aktar
   */
  private exportAsExcel(gridData: any): void {
    alert('Excel dÄ±ÅŸa aktarma Ã¶zelliÄŸi yakÄ±nda eklenecek!');
    // Not: Excel Ã§Ä±ktÄ±sÄ± iÃ§in genellikle SheetJS/xlsx gibi kÃ¼tÃ¼phaneler gereklidir
  }
  
  /**
   * JSON olarak dÄ±ÅŸa aktar
   */
  private exportAsJSON(gridData: any): void {
    const { data } = gridData;
    const jsonContent = JSON.stringify(data, null, 2);
    
    // JSON dosyasÄ±nÄ± indir
    this.downloadFile(jsonContent, 'application/json;charset=utf-8;', `${this.fileName}.json`);
  }
  
  /**
   * Dosya indirme iÅŸlevi
   */
  private downloadFile(content: string, contentType: string, fileName: string): void {
    const blob = new Blob([content], { type: contentType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', fileName);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
} 